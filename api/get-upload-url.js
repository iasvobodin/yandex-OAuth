// api/get-upload-url.js
import { getCookie, getRandomSuffix } from '../utils/helpers.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
function encodeYandexPath(pathSegments) {
    return pathSegments
        .map(segment => segment.normalize('NFC'))
        .map(segment => encodeURIComponent(segment))
        .join('/');
}

export default async function handler(request, response) {
    if (request.method !== 'POST') {
        return response.status(405).json({ error: 'Method Not Allowed' });
    }

    const accessToken = getCookie(request.headers.cookie, 'accessToken');
    if (!accessToken) {
        console.error("‚ùå –ù–µ—Ç accessToken –≤ –∫—É–∫–∞—Ö");
        return response.status(401).json({ error: 'Unauthorized: Access token not found in cookies.' });
    }

    let { fileName, folder, newNameForFile } = request.body;
    if (!fileName || !folder || !newNameForFile) {
        console.error("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", { fileName, folder, newNameForFile });
        return response.status(400).json({ error: 'Missing file or folder information.' });
    }

    try {
        console.log("‚û° –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { fileName, folder, newNameForFile });

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è iPhone
        fileName = fileName.normalize('NFC').trim();
        folder = folder.normalize('NFC').trim();
        newNameForFile = newNameForFile.normalize('NFC').trim();

        console.log("üîß –ü–æ—Å–ª–µ normalize:", { fileName, folder, newNameForFile });

        // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–µ
        let baseFolderSegments = [
            '–°–∏—Å—Ç–µ–º—ã –¢–ê–£ - –û–±—â–µ–µ',
            '–§–æ—Ç–æ –¢–ê–£ –∫–æ–Ω—Ç—Ä–æ–ª—å',
            folder
        ];

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ
        let hasAccessToMainFolder = true;
        let warningMessage = null;

        const mainFolderPath = encodeURIComponent('–°–∏—Å—Ç–µ–º—ã –¢–ê–£ - –û–±—â–µ–µ');
        const mainFolderUrl = `https://cloud-api.yandex.net/v1/disk/resources?path=${mainFolderPath}`;

        console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ: –°–∏—Å—Ç–µ–º—ã –¢–ê–£ - –û–±—â–µ–µ');
        const mainFolderCheck = await fetch(mainFolderUrl, {
            method: "GET",
            headers: { Authorization: `OAuth ${accessToken}` }
        });

        if (mainFolderCheck.status === 404) {
            hasAccessToMainFolder = false;
            warningMessage = "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—â–µ–π –ø–∞–ø–∫–µ '–°–∏—Å—Ç–µ–º—ã –¢–ê–£ - –û–±—â–µ–µ'. –§–∞–π–ª—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.";
            console.warn(warningMessage);

            // –ú–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            baseFolderSegments = [
                '–§–æ—Ç–æ –¢–ê–£ –∫–æ–Ω—Ç—Ä–æ–ª—å',
                folder
            ];
        }

        // 2. –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –ø–æ—ç—Ç–∞–ø–Ω–æ (–≤–∞–∂–Ω–æ –¥–ª—è iPhone!)
        let currentPath = '';
        for (let i = 0; i < baseFolderSegments.length; i++) {
            const segment = baseFolderSegments[i];
            currentPath += (currentPath ? '/' : '') + encodeURIComponent(segment.normalize('NFC'));

            const checkUrl = `https://cloud-api.yandex.net/v1/disk/resources?path=${currentPath}`;
            console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É ${i + 1}/${baseFolderSegments.length}:`, segment);

            const checkRes = await fetch(checkUrl, {
                method: "GET",
                headers: { Authorization: `OAuth ${accessToken}` }
            });

            if (checkRes.status === 404) {
                console.log(`üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É: ${segment}`);
                const createRes = await fetch(checkUrl, {
                    method: "PUT",
                    headers: { Authorization: `OAuth ${accessToken}` }
                });

                if (!createRes.ok) {
                    const errorText = await createRes.text();
                    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:", createRes.status, errorText);
                    throw new Error(`Failed to create folder: ${segment}`);
                }

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è iOS
                await new Promise(resolve => setTimeout(resolve, 200));
            }
        }

        const baseFolder = encodeYandexPath(baseFolderSegments);
        console.log("üìÇ baseFolder (–∏—Ç–æ–≥–æ–≤—ã–π):", baseFolder);

        // 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const ext = fileName.includes(".")
            ? fileName.slice(fileName.lastIndexOf("."))
            : "";
        const newFileName = `${newNameForFile}__${getRandomSuffix()}${ext}`;

        console.log("üìù –ò–º—è —Ñ–∞–π–ª–∞:", { original: fileName, newFileName });

        // 3. –ü–æ–ª—É—á–∞–µ–º upload URL —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—É—Ç–µ–º
        const fullPath = `${baseFolder}/${encodeURIComponent(newFileName.normalize('NFC'))}`;
        const uploadUrlReq = `https://cloud-api.yandex.net/v1/disk/resources/upload?path=${fullPath}&overwrite=true`;

        console.log("üåç –ó–∞–ø—Ä–æ—Å upload URL:", uploadUrlReq);

        const uploadRes = await fetch(uploadUrlReq, {
            method: "GET",
            headers: { Authorization: `OAuth ${accessToken}` }
        });

        if (!uploadRes.ok) {
            const errorText = await uploadRes.text();
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞:", uploadRes.status, errorText);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è iPhone
            console.error("üîç –ü—É—Ç—å –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω:", fullPath);
            console.error("üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å:", decodeURIComponent(fullPath));

            throw new Error("Failed to get upload URL");
        }

        const uploadData = await uploadRes.json();
        console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –Ø–Ω–¥–µ–∫—Å–∞:", uploadData);

        if (!uploadData.href) throw new Error("Failed to get upload URL");

        // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        const result = {
            uploadUrl: uploadData.href,
            newFileName
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—â–µ–π –ø–∞–ø–∫–µ
        if (warningMessage) {
            result.warning = warningMessage;
        }

        response.status(200).json(result);

    } catch (err) {
        console.error("üí• –û—à–∏–±–∫–∞ –≤ get-upload-url:", err);
        response.status(500).json({ error: err.message || 'Internal Server Error' });
    }
}