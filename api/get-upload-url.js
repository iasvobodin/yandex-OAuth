// api/get-upload-url.js
import { getCookie, getRandomSuffix } from '../utils/helpers.js';

export default async function handler(request, response) {
    if (request.method !== 'POST') {
        return response.status(405).json({ error: 'Method Not Allowed' });
    }

    const accessToken = getCookie(request.headers.cookie, 'accessToken');
    if (!accessToken) {
        console.error("‚ùå –ù–µ—Ç accessToken –≤ –∫—É–∫–∞—Ö");
        return response.status(401).json({ error: 'Unauthorized: Access token not found in cookies.' });
    }

    let { fileName, folder, subfolder } = request.body;
    if (!fileName || !folder || !subfolder) {
        console.error("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", { fileName, folder, subfolder });
        return response.status(400).json({ error: 'Missing file or folder information.' });
    }

    try {
        console.log("‚û° –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { fileName, folder, subfolder });

        // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º (–≤–∞–∂–Ω–æ –¥–ª—è iPhone)
        fileName = fileName.normalize('NFC');
        folder = folder.normalize('NFC');
        subfolder = subfolder.normalize('NFC');

        console.log("üîß –ü–æ—Å–ª–µ normalize:", { fileName, folder, subfolder });

        // –ø—É—Ç—å –∫–æ–¥–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
        const baseFolderSegments = [
            '–°–∏—Å—Ç–µ–º—ã –¢–ê–£ - –û–±—â–µ–µ',
            '–§–æ—Ç–æ –¢–ê–£ –∫–æ–Ω—Ç—Ä–æ–ª—å',
            folder
        ];
        const baseFolder = baseFolderSegments.map(s => encodeURIComponent(s)).join('/');

        console.log("üìÇ baseFolder (–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π):", baseFolder);

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É
        const checkFolderUrl = `https://cloud-api.yandex.net/v1/disk/resources?path=${baseFolder}`;
        console.log("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É:", checkFolderUrl);

        const checkFolderRes = await fetch(checkFolderUrl, {
            method: "GET",
            headers: { Authorization: `OAuth ${accessToken}` }
        });

        if (checkFolderRes.status === 404) {
            console.log("üìÅ –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Üí —Å–æ–∑–¥–∞—ë–º");
            await fetch(checkFolderUrl, {
                method: "PUT",
                headers: { Authorization: `OAuth ${accessToken}` }
            });
        }

        // 2. –ò–º—è —Ñ–∞–π–ª–∞
        const ext = fileName.includes(".")
            ? fileName.slice(fileName.lastIndexOf("."))
            : "";
        const newFileName = `${subfolder}__${getRandomSuffix()}${ext}`;
        const encodedFileName = encodeURIComponent(newFileName);

        console.log("üìù –ò–º—è —Ñ–∞–π–ª–∞:", { original: fileName, newFileName, encodedFileName });

        // 3. –ü–æ–ª—É—á–∞–µ–º upload URL
        const uploadUrlReq = `https://cloud-api.yandex.net/v1/disk/resources/upload?path=${baseFolder}/${encodedFileName}&overwrite=true`;
        console.log("üåç –ó–∞–ø—Ä–æ—Å upload URL:", uploadUrlReq);

        const uploadRes = await fetch(uploadUrlReq, {
            method: "GET",
            headers: { Authorization: `OAuth ${accessToken}` }
        });

        if (!uploadRes.ok) {
            const errorText = await uploadRes.text();
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞:", uploadRes.status, errorText);
            throw new Error("Failed to get upload URL");
        }

        const uploadData = await uploadRes.json();
        console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –Ø–Ω–¥–µ–∫—Å–∞:", uploadData);

        if (!uploadData.href) throw new Error("Failed to get upload URL");

        // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        response.status(200).json({
            uploadUrl: uploadData.href,
            newFileName
        });

    } catch (err) {
        console.error("üí• –û—à–∏–±–∫–∞ –≤ get-upload-url:", err);
        response.status(500).json({ error: err.message || 'Internal Server Error' });
    }
}
